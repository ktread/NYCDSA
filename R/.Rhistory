"alabama", "georgia", "tennesse"))
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 5),
stroke = FALSE)
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 5),
stroke = FALSE)
leaflet_andrew
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
library(googleVis)
library(leaflet)
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addProviderTiles("Esri.WorldStreetMap")
leaflet_andrew
library(dplyr)
birth = read.csv('/data/births.csv', stringsAsFactors=FALSE)
library(dplyr)
birth = read.csv('/data/births.csv', stringsAsFactors=FALSE)
birth = read.csv('/births.csv', stringsAsFactors=FALSE)
pwd
pwd
wkdir
dir
birth = read.csv('/R/births.csv', stringsAsFactors=FALSE)
cwd
wd
birth = read.csv('births.csv', stringsAsFactors=FALSE)
birth = read.csv('./births.csv', stringsAsFactors=FALSE)
getwd
getwd()
setwd(/Users/ktread/NYCDSA/R/)
setwd('/Users/ktread/NYCDSA/R/')
setwd('/Users/ktread/NYCDSA/R/')
getwd()
birth = read.csv('./births.csv', stringsAsFactors=FALSE)
View(birth)
girls_90 = filter(birth, sex=='girl' between(year, 1990,2000))
library(dplyr)
birth = read.csv('./births.csv', stringsAsFactors=FALSE)
girls_90 = birth %>%
select(sex)
print(girls_90)
girls_90 = birth %>%
select(everything()) %>%
filter(birth, sex=='girl' between(year, 1990,2000))
print(girls_90)
library(dplyr)
birth = read.csv('./births.csv', stringsAsFactors=FALSE)
girls_90 = birth %>%
select(everything()) %>%
filter(birth, sex=='girl' between(year, 1990,2000))
print(girls_90)
girls_90 = birth %>%
select(year,sex,births) %>%
filter(birth, sex=='girl' between(year, 1990,2000))
girls_90 = birth %>%
select(year,sex,births)
print(girls_90)
girls_90 = birth %>%
select(year,sex,births) %>%
filter(sex=='girl' between(year, 1990,2000))
girls_90 = birth %>%
select(year,sex,births) %>%
filter(sex=='girl', between(year, 1990,2000))
print(girls_90)
head(ggplot2::diamonds)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
head(diamonds_best)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut)
head(diamonds_price)
#Find the rows with color=='D' and clarity == 'IF'. Assign it to the variable diamonds_best.
#Calculate the average price of price per carat for the different qualities of cut based on the data frame diamonds_best. Save it to the avg_price column.
#Compare the average price between qualities by making a bar plot.
### Your code here
library(ggplot2)
library(dplyr)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut)
head(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price)/mean(groam))
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price)/mean(gram))
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price)/mean(carat))
head(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price/carat))
head(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price) / mean(carat))
head(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut)
head(diamonds_price)
#Find the rows with color=='D' and clarity == 'IF'. Assign it to the variable diamonds_best.
#Calculate the average price of price per carat for the different qualities of cut based on the data frame diamonds_best. Save it to the avg_price column.
#Compare the average price between qualities by making a bar plot.
### Your code here
library(ggplot2)
library(dplyr)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price) / mean(carat))
head(diamonds_price)
# 3. bar plot
diamonds_bar <-ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="pergram")
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity")
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity")
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels = dollars)
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels=dollar_format(prefix="$"))
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels::dollar_format(prefix="$"))
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels:= scales::dollar_format(prefix="$"))
library(scales)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price) / mean(carat))
#Find the rows with color=='D' and clarity == 'IF'. Assign it to the variable diamonds_best.
#Calculate the average price of price per carat for the different qualities of cut based on the data frame diamonds_best. Save it to the avg_price column.
#Compare the average price between qualities by making a bar plot.
### Your code here
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price) / mean(carat))
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels:= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
print(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(mutate(pergram = mean(price) / mean(carat)))
print(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise(pergram = mean(price)/mean(carat))
print(diamonds_price)
mutate(pergram = mean(price)/mean(carat))
summarise(pergram = mean(price)/mean(carat))
summarise()
summarise(.)
summarise(.,)
summarise(diamonds_price,)
print(diamonds_price)
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
summarise()
mutate(pergram = mean(price)/mean(carat))
summarise()
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price)/mean(carat))
ddiamonds_price
diamonds_price
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=max(pergram)) +
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=max(pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=mean(pergram)) +
print(diamonds_bar) # make a plot, do not touch this line
diamonds_price %>%
group_by(cut) %>% mutate(pergram = mean(pergram))
diamonds_best = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(pergram))
diamonds_best = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(pergram))
diamonds_price = diamonds_price %>%
group_by(cut) %>%
mutate(pergram = mean(pergram))
diamonds_price
diamonds_price = diamonds_price %>%
group_by(cut) %>%
summarize(pergram = mean(pergram))
diamonds_price
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=mean(pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
#Find the rows with color=='D' and clarity == 'IF'. Assign it to the variable diamonds_best.
#Calculate the average price of price per carat for the different qualities of cut based on the data frame diamonds_best. Save it to the avg_price column.
#Compare the average price between qualities by making a bar plot.
### Your code here
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price)/mean(carat))
diamonds_price = diamonds_price %>%
group_by(cut) %>%
summarize(pergram = mean(pergram))
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=mean(pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price)/mean(carat))
diamonds_price = diamonds_price %>%
group_by(cut) %>%
summarize(pergram = mean(pergram))
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=mean(pergram)) +
geom_bar(stat="identity") + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar)
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
print(diamonds_bar) # make a plot, do not touch this line
diamonds_price
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(pergram = mean(price)/mean(carat))
diamonds_price = diamonds_price %>%
group_by(cut) %>%
summarize(pergramp = mean(pergram))
diamonds_price
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
geom_bar(stat="identity")
print(diamonds_bar)
diamonds_bar = ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
print(diamonds_bar) # make a plot, do not touch this line
diamonds_price
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(avg_price = mean(price)/mean(carat))
diamonds_price = diamonds_price %>%
group_by(cut) %>%
summarize(pergramp = mean(pergram))
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(avg_price = mean(price)/mean(carat))
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
print(diamonds_bar) # make a plot, do not touch this line
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=pergramp) +
geom_bar(stat="identity")  + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=avg_price) +
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=avg_price) +
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=avg_price/n) +
print(diamonds_bar) # make a plot, do not touch this line
geom_bar(stat="identity")  + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=(avg_price/n) +
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_price, aes(x=cut, y=(avg_price/n()) +
print(diamonds_bar) # make a plot, do not touch this line
diamonds_price
diamonds_value = diamonds_price %>%
group_by(cut)
diamonds_value
diamonds_value = diamonds_price %>%
group_by(cut) %>%
summarise(avg_price=max(avg_price))
diamonds_value
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_value, aes(x=cut, y=avg_price) +
print(diamonds_bar) # make a plot, do not touch this line
print(diamonds_bar) # make a plot, do not touch this line
geom_bar(stat="identity")  + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
diamonds_value = diamonds_price %>%
group_by(cut) %>%
summarise(avg_t_price=max(avg_price))
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price) +
print(diamonds_bar) # make a plot, do not touch this line
### Your code here
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(avg_price = mean(price)/mean(carat))
diamonds_value = diamonds_price %>%
group_by(cut) %>%
summarise(avg_t_price=max(avg_price))
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price) +
geom_bar(stat="identity")  + scale_y_continuous(labels= scales::dollar_format(prefix="$"))
print(diamonds_bar) # make a plot, do not touch this line
# 3. bar plot
diamonds_bar <-  ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price) +
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
### Your code here
library(ggplot2)
library(dplyr)
library(scales)
diamonds_best = diamonds %>%
select(everything()) %>%
filter(color=='D' & clarity == 'IF')
# 2. average price/gram in different quality
diamonds_price = diamonds_best %>%
group_by(cut) %>%
mutate(avg_price = mean(price)/mean(carat))
diamonds_value = diamonds_price %>%
group_by(cut) %>%
summarise(avg_t_price=max(avg_price))
# 3. bar plot
diamonds_bar =  ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price) +
print(diamonds_bar) # make a plot, do not touch this line
print(diamonds_bar) # make a plot, do not touch this line
diamonds_bar =  ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price) +
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
diamonds_value
# 3. bar plot
diamonds_bar <- ggplot(data=diamonds_value, aes(x=cut, y=avg_t_price)) +
geom_bar(stat="identity")
print(diamonds_bar) # make a plot, do not touch this line
