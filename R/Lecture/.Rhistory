test <- func(mat,vec)
test
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
apply(mat+vec, sum)
}
}
}
test <- func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
mat[row, col]*vec[row]
}
}
}
apply(mat, func(mat,vec))
sapply(mat, func(mat,vec))
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
mat[row, col]*vec[row]
}
}
}
sapply(mat, func(mat,vec))
lapply(mat, func(mat,vec))
apply(mat, func(mat,vec))
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(mat[row, col]*vec[row])
}
}
}
test = func(mat,vec)
test
mat = matrix(1:15, nrow = 3, ncol = 5)
vec = matrix(1:5, nrow = 5, ncol = 1)
res = NULL
mat
vec
test = func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
}
test = func(mat,vec)
test
res = c()
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
}
test = func(mat,vec)
test
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
return(res)
}
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]+vec[row])
}
return(res)
}
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]+vec[row])
}
}
return(res)
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return(res)
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
print(nrow(res))
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return(nrow(res))
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return(res)
}
(mat,vec)
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return(length(res))
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return(class(res))
}
func(mat,vec)
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return((res))
}
total <- func(mat,vec)
total
d <- matrix(total, nrow = 3, byrow = TRUE)
d
rowSums(d)
d <- matrix(total, nrow = 5, byrow = TRUE)
rowSums(d)
total
total[0]
total[1:]
total[1:10]
d <- matrix(total, nrow = 1,ncol = 1, byrow = TRUE)
rowSums(d)
total <- func(mat,vec)
d <- matrix(total, nrow = 1,ncol = 1, byrow = TRUE)
d
d <- matrix(total, nrow = 3,ncol = 1, byrow = TRUE)
rowSums(d)
d
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
return((res))
}
total <- func(mat,vec)
d <- matrix(total, nrow = 3,ncol = 1, byrow = TRUE)
rowSums(d)
d <- matrix(rowSum(total), nrow = 3,ncol = 1, byrow = TRUE)
rowSums(d)
d <- matrix(total) #, nrow = 3,ncol = 1, byrow = TRUE)
rowSums(d)
d <- matrix(total , nrow = 3,ncol = 1, byrow = TRUE)
d
sum_ = rowSums(total)
sumz = rowSums(total)
total <- func(mat,vec)
total
d <- matrix(total , nrow = 5,ncol = 5, byrow = TRUE)
d
d <- matrix(total , nrow = 3,ncol = 5, byrow = TRUE)
d
x = rowSums(d)
x
func <- function(mat,vec) {
if (ncol(mat) != nrow(vec)) {
return("Bad Math")
}
for(row in 1:nrow(mat)) {
for(col in 1:ncol(mat)) {
res <- append(res,mat[row, col]*vec[row])
}
}
add <- matrix(res , nrow = nrow(mat),ncol = ncol(mat), byrow = TRUE)
total <- rowSums(add)
return(total)
}
total <- func(mat,vec)
total
nums = c(3,76,32,6,7,62,12)
m = lapply(nums, median)
m
m = apply(nums, median)
nums = c(3,76,32,6,7,62,12)
m = apply(nums, median)
m = lapply(nums, median)
m
median(m)
n = c(3,76,32,6,7,62,12)
n = c(3,76,32,6,7,62,12)
median(n)
md = median(n)
lapply(n, n-md)
lapply(n, (n-md)
e = lapply(n, (n-md)
e
x = n-md
x
median(x)
x = abs(n-md)
median(x)
mad <- function(n) {
md = median(n)
x = abs(n-md)
y = median(x)
return(y)
}
mad(n)
Names <- "John Andrew Thomas"
f = split(Names, " ")
f
f = strsplit(Names, " ")
f
s = paste(f,"@gmail.com")
s
Names <- "John Andrew Thomas"
f = strsplit(Names, " ")
Names <- "John Andrew Thomas"
f = strsplit(Names, " ")
s = paste(f,collapse="@gmail.com")
s
f
length(f)
c(f)
f = strsplit(Names, " ")
s = paste(f,"@gmail.com")
s
s = paste(Names,"@gmail.com")
s
length(Names)
Names <- "John Andrew Thomas"
unlist(strsplit(Names, split=" "))
N = unlist(strsplit(Names, split=" "))
N
length(N)
G = paste(N, "@gmail.com")
G
trim(N)
Names <- "John Andrew Thomas"
N = unlist(strsplit(Names, split=" "))
N = gsub(" ", "", N)
G = paste(N, "@gmail.com")
G
N = gsub("", " ", N)
G = paste(N, "@gmail.com")
G
N = gsub(" ", "", N)
G = paste(N, "@gmail.com")
G
G = paste(N-1, "@gmail.com")
G = paste(N, "@gmail.com", sep = '')
G
K = paste(G, ";", sep = '')
K
toString(K)
#K = paste(G, ";", sep = '')
gsub(";","",toString(G))
x = c('a','b','c','d','e')
y = c('a','b','c','d','e')*5
y = c('a','b','c','d','e')
y*5
list(x, y)
x = c('a','b','c','d','e')
y = c('a','b','c','d','e')
z = c(x,y)
rep(y, 4)
rep(y, c(4,4,4,4))
rep(y, c(4,4,4,4,4))
y = rep(y, c(4,4,4,4,4))
z = x+y
append(x,y)
sapply(x,append(y))
sapply(x,append)
sapply(x,append=y)
sapply(x,y)
sapply(x,toupper)
sapply(x,tolower)
z = paste(x,y)
z
z = paste(x,y,sep='')
z
compare <- function(a,b)
{
if (length(a) != length(b)) {
return("Not Equal Length")
}
return("Equal Length")
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
compare <- function(a,b)
{
if (length(a) != length(b)) {
return("Not Equal Length")
} else {
return("Equal Length")
}
}
compare("EPS568","SummerA")
length("EPS568") ,"SummerA")
length("EPS568") # ,"SummerA")
nchar("EPS568") # ,"SummerA")
compare("EPS568","SummerA")
(nchar("EPS568") != nchar("SummerA"))
nchar("SummerA")
nchar("EPS568")
(nchar("EPS568") != nchar("SummerA"))
(nchar("EPS568") != nchar("Summer"))
if (nchar(a) != nchar(b)) {
return("Not Equal Length")
}
compare <- function(a,b)
{
if (nchar(a) != nchar(b)) {
return("Not Equal Length")
}
}
compare("EPS568","SummerA")
compare("EPS568","Summer")
compare <- function(a,b)
{
if (nchar(a) != nchar(b)) {
return("Not Equal Length")
}
return("EQ")
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
compare("EPS568","SummerA")
compare("EPS568","Summer")
compare <- function(a,b)
{
if (nchar(a) != nchar(b)) {
return("Not Equal Length")
}
return("Equal Length")
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
x <- sum(sample(1:6, 2, replace=T))
x <- sum(sample(1:6, 2, replace=T))
x <- sum(sample(1:6, 2, replace=T))
x <- sum(sample(1:6, 2, replace=T))
x <- sum(sample(1:6, 2, replace=T))
x
cr < -switch(x,
)
cr <- switch(x,
)
cr
cr
x <- sum(sample(1:6, 2, replace=T))
switch(x,
win = x[x = 7 | x =11],
x <- sum(sample(1:6, 2, replace=T))
switch(x,
win = x[x==7 | x==11],
lose = x[x ==2 | x==3 | x== 12],
point = x[x == 7 | x==11]
)
switch(x,
win = x[x==7 | x==11],
lose = x[x ==2 | x==3 | x== 12],
point = x[x == 7 | x==11]
)
switch(x,
win = x[x==7 | x==11],
lose = x[x ==2 | x==3 | x== 12],
point = x[x == 7 | x==11]
)
x <- sum(sample(1:6, 2, replace=T))
switch(x,
win = (x=7 | x = 11),
lose = (x=2 | x = 3),
point = (x=8)
)
switch(x,
win = (x=7 | x = 11),
lose = (x=2 | x = 3),
point = (x=8)
)
age_type = 'middle'
switch(age_type,
)
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70]
)
age = sample(0:100, 20, replace=TRUE)
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70]
)
age = sample(0:100, 20, replace=TRUE)
age_type = 'middle'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70]
)
x <- sum(sample(1:6, 2, replace=T))
switch(x,
win = (x=7 | x = 11),
lose = (x=2 | x = 3),
point = (x=8)
)
win = 'win'
x <- sum(sample(1:6, 2, replace=T))
switch(win,
win = (x=7),
lose = (x=2),
point = (x=8)
)
switch(win,
win = (x=8),
lose = (x=2),
point = (x=8)
)
switch(win,
win = (x=8),
lose = (x=2),
point = (x=8)
)
