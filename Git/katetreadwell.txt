### Question #1: 
1. Create a directory named `test` and make `test` a git repository.

mkdir test
cd test
git init

2. Create a file named `a.txt` with the content “Git is good” under test and add `a.txt` to the staging area.

vi a.txt
<esc> wq
git add a.txt

3. Run the command `git status` and check the output.

git status

3. Now commit your changes and check the output of `git status`.

git commit -m "adding test doc" 


### Question #2:

1. Create a new directory named `subtest` under `test` repo and add a file `b.txt` into it, the content can be anything.

mkdir subtest
cd subtest/
vi b.txt

2. Add some more files, for example `a1.txt`, `a2.txt`, to test repo and then add all of them to the staging area.

vi a1.txt
cd ..
vi a2.txt
git add .

3. Run `git status` to make sure you have everything in the staging area and then commit them.

git status
git commit -m "adding new test files for question 2" 

4. Display all the commits we’ve done so far.

git log --oneline


### Question #3:

1. Create a new repository with the name `test` under your Github account and follow the instruction on Github to link the remote repository with the local one you just created in question 1. This [instruction link](https://help.github.com/articles/adding-a-remote/) might be useful.

git remote add origin https://github.com/ktread/test.git
git push -u origin master


2. Add a new line “Github is awesome” to the file `a.txt` under the local repo `test` and then add the change to the staging area.




3. Now `a.txt` has two versions. Use `git diff` to show the difference between the old version that we just committed and the new one in the staging area.


4. Commit the changes and push it to the remote repo.

git add . 
 git commit -m "adding second line to a.txt"   
 git push origin master

### Question #4:

1. Read [this tutorial](https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting) and finish the following questions using the r
ight commands.

2. Edit `a1.txt` and add it to the staging area and then try to undo the changes.

git reset --hard a.txt

3. Edit the file `a1.txt` and commit it to the repository and then try to undo the changes you just committed.

 git revert 7a3305e